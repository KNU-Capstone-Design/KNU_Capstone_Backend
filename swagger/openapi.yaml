openapi: 3.0.0
info:
  title: Capstone
  version: 1.0.1
  description: RESTful 원칙에 기반한 이메일 구독 등록, 해지 및 문제/답변/체점 API입니다.

tags:
  - name: Subscribe
    description: 이메일 구독 등록 및 해지
  - name: Users
    description: 사용자 정보 수정 및 조회
  - name: Questions
    description: 질문 정보 조회
  - name: Activities
    description: 사용자 문제풀이 정보 조회
  - name: Answers
    description: 사용자 답변 제출
  - name: Auth
    description: 이메일 기반 인증 처리

paths:
  
  /api/subscribe:
    post:
      tags:
        - Subscribe
      summary: 구독 등록
      description: 사용자 이메일을 통해 새로운 구독자를 생성, 구독자가 선택한 카테고리들도 DB에 함께 저장. 카테고리는 문자열 배열 타입으로 전송
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                category:
                  type: array
                  format: array
                  example: [ "Network", "Backend" ]
      responses:
        '201':
          description: 구독 등록 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 이메일이 성공적으로 등록되었습니다.
                  email:
                    type: string
                    example: user@example.com
        '409':
          description: 이미 등록된 이메일
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 이미 구독 중인 이메일입니다.
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 서버 오류
    patch:
      tags:
        - Subscribe
      summary: 구독 해지
      description: 이메일 주소를 받아 구독을 해지합니다. (DB에서 이메일 삭제하지 않음)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: 구독 해지 처리 결과
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  email:
                    type: string
              examples:
                success:
                  summary: 정상적으로 구독이 해지된 경우
                  value:
                    message: 이메일 구독이 성공적으로 해지되었습니다.
                    email: user@example.com
                already_unsubscribed:
                  summary: 이미 구독이 해지된 경우
                  value:
                    message: 해당 이메일은 이미 구독 해지된 상태입니다.
                    email: user@example.com
        '404':
          description: 등록된 이메일이 없을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 해당 이메일은 구독되어 있지 않습니다.
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 서버 오류

  /api/activities?page={page}&limit={limit}:
    get:
      tags:
        - Activities
      summary: 질문 리스트 조회 – 페이지네이션
      description: 사용자가 풀었던 CS 면접 질문 리스트 조회하기. 기본은 10 limit, data를 제외한 필드를 첫페이지에 대한 요청에만 발송
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: 사용자 이메일
                    example: temp@temp.com
                  page:
                    type: integer
                    description: 현재 페이지 번호
                    example: 1
                  limit:
                    type: integer
                    description: 페이지당 항목 수
                    example: 15
                  total:
                    type: integer
                    description: 전체 아이템 수
                  totalPages:
                    type: integer
                    description: 전체 페이지 수
                  streak:
                    type: integer
                    description: 사용자 스트릭
                  data:
                    type: array
                    description: 질문 목록
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: 질문 ID
                        date:
                          type: string
                          description: 질문 발송 날짜
                        title:
                          type: string
                          description: 질문 제목
                        category:
                          type: string
                          description: 질문 카테고리
                        score:
                          type: number
                          description: 점수
                      required:
                        - _id
                        - title
                        - category
                        - content
                required:
                  - data    #required는 어떻게 해야할까
        '400':
          description: 잘못된 요청
        '500':
          description: 서버 내부 오류

  /api/activities/{questionId}:
    get:
      tags:
        - Activities
      summary: 더보기 버튼 클릭시 보여줄 데이터
      description: 사용자가 풀었던 질문의 상세 내용(답변, AI 피드백, 정답 등)을 반환합니다.
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: string
          description: 조회할 질문의 고유 ID
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  questionId:
                    type: string
                  category:
                    type: string
                    description: 질문 카테고리
                    example: "Android"
                  userAnswer:
                    type: string
                    description: 사용자가 제출한 답변
                    example: "Layout XML은 Android 앱의 UI를 정의하는 파일입니다..."
                  feedback:
                    type: object
                    description: AI 피드백
                    properties:
                      wellDone:
                        type: string
                        description: 잘한 점
                        example: "ViewGroup과 View의 구조를 정확하게 설명하였습니다."
                      improve:
                        type: string
                        description: 개선할 점
                        example: "예제를 통해 실제 사용 맥락을 설명하면 더 좋습니다."
                      mistake:
                        type: string
                        description: 틀린 점
                        example: "layout_weight에 대한 설명이 누락되었습니다."
                  answer:
                    type: object
                    description: AI가 제공한 정답/모범답안
                    properties:
                      answer:
                        type: string
                        description: 핵심 요약
                        example: "RDBMS는 관계형 데이터베이스 관리 시스템으로, 데이터를 표 형태로 저장하고 관리합니다. DBMS는 데이터베이스 관리 시스템의 총칭입니다."
                      explanation:
                        type: string
                        description: 개념 해설
                        example: "RDBMS는 DBMS의 한 유형으로 관계형 모델 기반이고, DBMS는 데이터베이스 시스템 전체를 의미합니다."
                      examples:
                        type: array
                        description: 예시들
                        items:
                          type: string
                        example: [ "RDBMS 예: MySQL, PostgreSQL", "DBMS 예: MongoDB, Cassandra" ]
                      notes:
                        type: array
                        description: 추가 설명 및 주의사항
                        items:
                          type: string
                        example: [ "RDBMS는 정형 데이터를 다루는 데 강점", "DBMS는 다양한 데이터 모델 지원" ]

  
  
  /api/users:
    get:
      tags:
        - Users
      summary: 사용자 정보를 조회합니다.
      description: 사용자의 구독 정보 및 상태를 DB에서 조회해서 반환합니다.
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 사용자 이메일,구독 정보 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: temp@temp.com
                  subscriptionStatus:
                    type: boolean
                    example: 'true'
                  category:
                    type: string
                    example: [ "Backend","Frontend" ]

        '401':
          description: 인증 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 인증 오류
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 서버 오류

    patch:
      tags:
        - Users
      summary: 사용자 정보를 수정합니다.
      description: 사용자 구독 항목을 수정합니다.(이메일은 변경 x), 서버에 보내져야하는건 변경이후 구독한 항목 전부임 ex) 기존에 백엔드만 구독했는데 안드로이드를 추가하면 ["Backend", "Android"]가 되어야합니다.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                category:
                  type: array
                  format: array
                  example: [ "Backend", "Frontend" ]
      responses:
        '200':
          description: 구독 항목 변경 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "구독 항목 변경 완료"

        '401':
          description: 인증 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 인증 오류
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 서버 오류

  /api/questions/{questionId}:
    get:
      tags:
        - Questions
      summary: 특정 질문 단건 조회
      description: 이메일 링크에 포함된 questionId를 Path 파라미터로 받아 해당 질문의 카테고리와 본문을 반환합니다.쿼리에는 /뒤에 그대로 questionId쓰면됨.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: string
          description: 조회할 질문의 고유 ID
      responses:
        '200':
          description: 질문 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    type: string
                    example: "OS"
                  question:
                    type: string
                    example: "페이징에 대해 설명해주세요"
        '401':
          description: 인증 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 인증 오류
        '404':
          description: 해당 ID의 질문 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 질문을 찾을 수 없습니다.
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 서버 오류

  /api/answers/{questionId}:
    post:
      tags:
        - Answers
      summary: 답변 제출 및 피드백 요청
      description: 사용자가 입력한 답변에 대한 AI 피드백을 제공합니다
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: 질문 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                  description: 사용자 답변 내용
              required:
                - answer
      responses:
        '200':
          description: 성공적으로 피드백 제공
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: number
                    example: 80
                  strengths:
                    type: array
                    items:
                      type: string
                    example: [ "BFS와 DFS의 정의를 정확하게 설명했습니다." ]
                  improvements:
                    type: array
                    items:
                      type: string
                    example: [ "시간 복잡도에 대한 설명을 추가하면 좋겠습니다." ]
                  wrongPoints:
                    type: array
                    items:
                      type: string
                    example: [ ]
        '400':
          description: 잘못된 요청
        '500':
          description: 서버 오류

  /api/answers/reveal/{questionId}:
    get:
      tags:
        - Answers
      summary: 모범 답안 요청
      description: 모르겠어요 버튼 클릭 시 AI가 생성한 모범 답안을 제공합니다.
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: 질문 ID
      responses:
        '200':
          description: 성공적으로 피드백 제공
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                    example: "알고리즘은 특정 문제를 해결하기 위한 단계적 절차 또는 공식입니다."
                  explanation:
                    type: string
                    example: "알고리즘은 입력 데이터를 받아 처리하여 원하는 출력을 생성하는 일련의 명령어 집합으로 구성됩니다. 효율적인 알고리즘은 문제 해결 시간을 단축시키고, 컴퓨터 자원을 절약할 수 있습니다."
                  example:
                    type: string
                    example: "요리 레시피: 특정 요리를 만들기 위한 재료 준비 및 조리 순서를 단계적으로 설명한 것 길 찾기: 지도 앱에서 출발지와 목적지를 입력하면 최적의 경로를 안내해 주는 것"
                  notes:
                    type: string
                    example: "알고리즘은 컴퓨터 과학뿐만 아니라 일상생활의 다양한 문제 해결에 활용될 수 있습니다. 알고리즘의 정확성과 효율성은 문제 해결의 질을 결정짓는 중요한 요소입니다."
        '500':
          description: 서버 오류

  /api/answers/{answerId}/grade:
    post:
      tags:
        - Answers
      summary: 특정 답변에 대한 AI 채점 요청
      description: 사용자가 제출한 특정 답변에 대해 Grok API를 통해 AI 채점을 수행합니다. 채점 결과는 점수와 피드백으로 구성되며, 이후 오답노트에 활용됩니다.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: answerId
          required: true
          schema:
            type: string
          description: 채점을 요청할 답변의 고유 ID
      responses:
        '200':
          description: AI 채점 결과 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: number
                    example: 78
                  feedback:
                    type: object
                    properties:
                      wellDone:
                        type: string
                        example: "OSI 7계층의 구성 계층을 정확히 나열하였습니다."
                      improve:
                        type: string
                        example: "각 계층의 역할에 대한 간단한 설명이 있었다면 더 완성도 있는 답변이 되었을 것입니다."
                      mistake:
                        type: string
                        example: "계층 간 관계 설명이 누락되었습니다."
        '401':
          description: 인증 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 인증 오류
        '404':
          description: 답변을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 해당 답변을 찾을 수 없습니다.
        '500':
          description: 서버 오류 또는 Grok API 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: AI 채점 처리 중 오류가 발생했습니다.

  /api/answers/{questionId}/retry:
    post:
      tags:
        - Answers
      summary: 문제 다시 풀기
      description: 사용자가 이전에 푼 문제를 다시 선택하여 풀 수 있도록 기존 기록 위에 덮어씁니다. 토큰 인증이 필요합니다.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: string
          description: 다시 풀 문제의 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                  example: "function solution() { return true; }"
      responses:
        '200':
          description: 답변이 업데이트되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 답변이 갱신되었습니다.
                  questionId:
                    type: string
                    example: q001
                  newAnswer:
                    type: string
                    example: "function solution() { return true; }"
        '404':
          description: 기존 문제 기록 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 해당 문제의 기존 답변이 존재하지 않습니다.
        '401':
          description: 인증 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 인증 오류
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 서버 오류.

  /api/auth/verify:
    post:
      tags:
        - Auth
      summary: 이메일 인증 토큰을 검증하고 HttpOnly 쿠키로 설정
      description: 이메일 링크를 클릭한 사용자가 제공한 토큰을 검증하고, 인증된 사용자로 간주하여 토큰을 HttpOnly 쿠키로 저장합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "abc123xyz890token"
      responses:
        '200':
          description: 인증 성공 및 쿠키 설정 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: "토큰 인증 성공"
        '400':
          description: 토큰 누락
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "토큰이 필요합니다."
        '401':
          description: 유효하지 않은 토큰
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "유효하지 않은 토큰입니다."
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "서버 오류 발생" 
    