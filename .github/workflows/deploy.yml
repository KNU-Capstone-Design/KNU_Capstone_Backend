name: Deploy Code

on:
  push:
    branches:
      - main
    paths:
      - 'swagger/openapi.yaml'  # Swagger 파일 수정 시
      - 'src/**'  # 메인 코드 파일 수정 시
      - 'docker-compose.yml'
      - 'Dockerfile'

jobs:
  deploy-swagger:
    if: contains(github.event.head_commit.message, 'swagger')  # Swagger 파일 수정일 때만 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy Swagger UI
        run: |
          curl -L https://github.com/swagger-api/swagger-ui/archive/refs/heads/master.zip -o swagger-ui.zip
          unzip swagger-ui.zip
          rm -rf docs
          mkdir docs
          cp -r swagger-ui-master/dist/* docs/
          cp swagger/openapi.yaml docs/openapi.yaml
          sed -i 's|https://petstore.swagger.io/v2/swagger.json|openapi.yaml|' docs/swagger-initializer.js
          touch docs/.nojekyll

      - name: Commit & Push to GitHub Pages
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add docs/
          git commit -m "Swagger UI 자동 배포" || echo "변경 사항 없음"
          git push origin HEAD || echo "❌ push 실패"

  deploy-code:
    if: !contains(github.event.head_commit.message, 'swagger')  # Swagger 외 코드 수정 시 실행
    needs: deploy-swagger  # Swagger UI 배포 후 코드 배포
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: SSH into Azure VM and deploy code
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_USER }}
          password: ${{ secrets.AZURE_SSH_PASSWORD }}
          script: |
            # SSH로 VM에 접속하여 배포 작업 수행
            cd ~/your-repo
            git pull --rebase origin main  # 최신 코드 가져오기
            docker-compose down           # 기존 컨테이너 중지
            docker-compose up -d --build  # 새로운 컨테이너 빌드 및 실행